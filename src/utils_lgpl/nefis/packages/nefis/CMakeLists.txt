# Set the directory of where the source code is located.
set(src_path src) 

# Set version file variables
# These variables are necessary when the version files need to be generated and be present for configuring the project file.
# Note that the CMAKE_CURRENT_SOURCE_DIR has a path to the location of where this CMakeLists file is defined in.
set(header_version_file "${CMAKE_CURRENT_SOURCE_DIR}/include/nefis_version.h")
set(rc_version_file "${CMAKE_CURRENT_SOURCE_DIR}/include/nefis_version.rc")
set(version_include_dir ${CMAKE_SOURCE_DIR}/../version_includes)

if (UNIX)
    #name mangling, these functions are generated by the FortranCInterface cmake package and might be system dependent
    include(FortranCInterface)
    FortranCInterface_HEADER("${CMAKE_CURRENT_SOURCE_DIR}/include/FortranCInterface.h" MACRO_NAMESPACE "FC_")
    #produce a config.h to be included
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake.in ${CMAKE_CURRENT_SOURCE_DIR}/include/config.h)  
    set(configFile "${CMAKE_CURRENT_SOURCE_DIR}/include/config.h") 
    add_definitions(-DHAVE_LSEEK64)
endif(UNIX)


# Gather source files
file(GLOB headers include/*.h)
file(GLOB source ${src_path}/*.c
                 ${src_path}/*.cpp)
list(REMOVE_ITEM source ${CMAKE_CURRENT_SOURCE_DIR}/${src_path}/nef-xdr.c)

# Define library
set(library_name nefis)
add_library(${library_name} ${headers}
                            ${source}
                            ${ini_version_file})


# Set additional dependencies
target_include_directories(${library_name}  PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include" ${version_include_dir})

# Set preprocessor definitions
if (UNIX)
    target_compile_definitions(${library_name} PRIVATE "PTR8;linux;LINUX64;HAVE_LSEEK64;_IA64_;_LIB;_CRT_SECURE_NO_WARNINGS")    
endif(UNIX)
if (WIN32)
    target_compile_definitions(${library_name} PRIVATE "W64;PTR8;WIN64;_WIN64;_IA64_;_WINDOWS;_DEBUG;_LIB;_CRT_SECURE_NO_WARNINGS")
endif(WIN32)

set_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/src/*.c
                            ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
                            PROPERTIES COMPILE_OPTIONS "${file_preprocessor_flag}")


# Define the Visual Studio structure
source_group(${visual_studio_source_group_name} FILES ${source})
source_group("${visual_studio_source_group_name}\\Header Files" FILES ${headers})
source_group("Version Files" FILES ${ini_version_file})

# Create the folder structure in vfproj
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${headers} ${source})
set_target_properties (${library_name} PROPERTIES FOLDER utils_lgpl/nefis)

###############
# nefis_dll
###############
string(TOUPPER ${CONFIGURATION_TYPE} configuration_type)
if ( ${configuration_type} STREQUAL "DELFT3D4" OR 
     ${configuration_type} STREQUAL "TOOLS" )    
    set(library_name nefis_dll)

    add_library(${library_name} SHARED ${headers} ${source} ${ini_version_file})

    # Set additional dependencies
    target_include_directories(${library_name}  PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/include" ${version_include_dir})

    # Set preprocessor definitions
    if (UNIX)
        target_compile_definitions(${library_name} PRIVATE "PTR8;linux;LINUX64;_IA64_;_LIB;_CRT_SECURE_NO_WARNINGS")    
    endif(UNIX)
    if (WIN32)
        target_compile_definitions(${library_name} PRIVATE "NEFIS_DLL;W64;PTR8;WIN64;_WIN64;_IA64_;_WINDOWS;_DEBUG;_LIB;_CRT_SECURE_NO_WARNINGS")
    endif(WIN32)
  
    source_group(${visual_studio_source_group_name} FILES ${source})
    source_group("${visual_studio_source_group_name}\\Header Files" FILES ${headers})
    source_group("Version Files" FILES ${ini_version_file})
  
    source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${headers} ${source})
    set_target_properties (${library_name} PROPERTIES FOLDER utils_lgpl/nefis_dll)
  
    # Set post-build step
    set(install_dir ${CMAKE_BINARY_DIR})
    set(build_dir ${CMAKE_BINARY_DIR})
  
    post_build_target (${library_name}
                       ${install_dir} 
                       ${build_dir} 
                       ${checkout_src_root} 
                       ${library_name})

    install(TARGETS ${library_name} DESTINATION lib)
endif()

